use array::{ArrayTrait};
use alexandria_math::blake2b::{blake2b,convert_u8_array_to_felt252_array};
fn get_lorem_ipsum() -> Array<u8> {
    let mut input: Array<u8> = Default::default();
    input.append(0x61);
    input.append(0x62);
    input.append(0x63);
    input
}

fn get_lorem_ipsum_2() -> Array<u8> {
    let mut input: Array<u8> = Default::default();
    input.append(0x68); input.append(0x61); input.append(0x73); input.append(0x6C); input.append(0x68); input.append(0x66); input.append(0x65); input.append(0x6C); input.append(0x61); input.append(0x75); input.append(0x63); input.append(0x72); input.append(0x73); input.append(0x6C); input.append(0x6E); input.append(0x61); input.append(0x65); input.append(0x69); input.append(0x6F); input.append(0x6E); input.append(0x69); input.append(0x63); input.append(0x65); input.append(0x6F); input.append(0x77); input.append(0x68); input.append(0x66); input.append(0x6B); input.append(0x73); input.append(0x6E); input.append(0x76); input.append(0x6D); input.append(0x72); input.append(0x65); input.append(0x6A); input.append(0x62); input.append(0x69); input.append(0x6F); input.append(0x65);
    input
}

// input.append(0x68); input.append(0x61); input.append(0x73); input.append(0x6C); input.append(0x68); input.append(0x66); input.append(0x65); input.append(0x6C); input.append(0x61); input.append(0x75); input.append(0x63); input.append(0x72); input.append(0x73); input.append(0x6C); input.append(0x6E); input.append(0x61); input.append(0x65); input.append(0x69); input.append(0x6F); input.append(0x6E); input.append(0x69); input.append(0x63); input.append(0x65); input.append(0x6F); input.append(0x77); input.append(0x68); input.append(0x66); input.append(0x6B); input.append(0x73); input.append(0x6E); input.append(0x76); input.append(0x6D); input.append(0x72); input.append(0x65); input.append(0x6A); input.append(0x62); input.append(0x69); input.append(0x6F); input.append(0x65);

#[test]
#[available_gas(20000000000)]
fn test_fail() {
    let msg = get_lorem_ipsum();
    let res = blake2b(msg);
    // assert(msg.len() == 6400, 'Incorrect hash length');
    // assert(true==false, 'fail');
    panic(convert_u8_array_to_felt252_array(res.span()));

}

#[test]
#[available_gas(20000000000)]
fn test_fail_2() {
    let msg = get_lorem_ipsum_2();
    let res = blake2b(msg);
    // assert(msg.len() == 6400, 'Incorrect hash length');
    // assert(true==false, 'fail');
    panic(convert_u8_array_to_felt252_array(res.span()));

}


// [79 , 154, 56 , 171, 42 , 252, 252, 100 , 17 , 102 ,
//  150, 173, 4 , 6 , 178, 119 , 120 , 35 , 17 , 184, 201,
//   12 , 158, 127 , 122 , 234, 20 , 90 , 163, 179, 64 ,
//    2 , 167, 204, 115 , 164, 142, 148, 189, 82 , 73 , 156, 23 ,
//     214, 73 , 43 , 100 , 20 , 137, 208, 123 , 69 , 247, 225,
//      189, 72 , 105 , 179, 7 , 244, 74 , 72 , 20 , 111 , ]

     

// '), 190, 127 (''), 122 ('z'), 234, 20 (''), 90 ('Z'), 227, 179, 128,
//  2 (''), 167, 204, 115 ('s'), 164, 142, 148, 189, 82 ('R'), 73 ('I'),
//   156, 23 (''), 214, 137, 44 (','), 36 ('$'), 20 (''), 137, 208, 123 ('{'),
//    69 ('E'), 247, 225, 189, 72 ('H'), 105 ('i'), 179, 7 (''), 244, 138, 72 ('H'), 180, 111 ('o'), ]

// [0 (''), 1 (''), 2 (''), 3 (''), 4 (''), 5 (''), 6 (''), 7 (''), 8 ('), 9 ('	'), 10 ('
// '), 11 ('
//          '), 12 ('
// '), 14 (''), 15 (''), ]. ('

// [17350586023075716586, 13503953896175478587, 4354685564936845355, 11912009170470909681, 13249304492735193375, 11170449401992604703, 2270897969802886507, 6620516959819538809, 17176182768010960895, 13503953896175478587, 4354685564936845355, 11912009170470909681, 8607219088846449759 , 11170449401992604703, 16175846103906665108, 6620516959819538809]
// [1541376659004305018,  13503953896175478587, 4354685564936845355, 11912009170470909681, 18328968923216187920, 11170449401992604703, 2270897969802886507, 6620516959819538809, 2694580911285782792 , 13503953896175478587, 4354685564936845355, 11912009170470909681, 12572361309758160896, 11170449401992604703, 16175846103906665108, 6620516959819538809, ]

// 16867786655646428328
// 16867786655646428328,
// 16867786655646428328

// 11101010000101100110101010011000 00001100111000010010110010101000
// 00001100111000010010110010101000 11101010000101100110101010011000

// 00001100111000010010110010101000 00000000000000000000000000000000



// 11101010000101100110101010011000 00001100111000010010110010101000
// 00000000000000000000000000000000 11101010000101100110101010011000
// 00001100111000010010110010101000 00000000000000000000000000000000


// [9707440099081960313, 13919708115642571251, 14313883604204833422, 902916003658517597, 4967013240145357303, 11837650394348604030, 15999054287854434379, 6439224605934397036, 13746022367454054535, 7090913738691013329, 18052591224639614398, 5916165702131158410, 16153577839664528003, 2052363037506523539, 10342616010177476862, 2528949647217589348, ]
// [9707440099081960313, 13919708115642571251, 14313883604204833422, 902916003658517597, 4967013240145357303, 11837650394348604030, 15999054287854434379, 6439224605934397036, 13746022367454054535, 7090913738691013329, 18052591224639614398, 5916165702131158410, 16153577839664528003, 2052363037506523539, 10342616010177476862, 2528949647217589348]
// [9707440099081960313, 13919708115642571251, 14313883604204833422, 902916003658517597, 4967013240145357303, 11837650394348604030, 15999054287854434379, 6439224605934397036, 13746022367454054535, 7090913738691013329, 18052591224639614398, 5916165702131158410, 16153577839664528003, 2052363037506523539, 10342616010177476862, 2528949647217589348, ]

// [1364461374734137046, 13613640505929366261, 8303692642983904825, 10943563935731742460, 17594462383975542695, 12275336526594852478, 2413246649269192691, 10406252972527270210, 8478994538031791908, 17184858713099631268, 17912519326220377950, 16371239448533717574, 9825709812748823051, 11858991849840277667, 7236364838079621504, 16722888221560617858, ]
// [1364461374734137046, 13613640505929366261, 8303692642983904825, 10943563935731742460, 17594462383975542695, 12275336526594852478, 2413246649269192691, 10406252972527270210, 8478994538031791908, 17184858713099631268, 17912519326220377950, 16371239448533717574, 9825709812748823051, 11858991849840277667, 7236364838079621504, 16722888221560617858]

// [189, 221, 129, 60 , 99 , 66 , 57 , 114 , 49 , 113 , 239, 63 , 238, 152, 87 , 155, 148, 150, 78 , 59 , 177, 203, 62 , 66 , 114 , 98 , 200, 192, 104 , 213, 35 , 25 , 24 , 164, 185, 147, 221, 128, 92 , 202, 153, 139, 136, 163, 4 , 102 , 65 , 99 , 94 , 226, 255, 62 , 90 , 76 , 156, 74 , 229, 35 , 73 , 32 , 60 , 88 , 121 , 100 , ]

// 189 221 129 60 99 66 57 114 49 113 239 63 238 152 87 155 148 150 78 59 177 203 62 66 114 98 200 192 104 213 35 25 24 164 185 147 221 128 92 202 153 139 136 163 4 102 65 99 94 226 255 62 90 76 156 74 229 35 73 32 60 88 121 100

// bd dd 81 3c 63 42 39 72 31 71 ef 3f ee 98 57 9b 94 96 4e 3b b1 cb 3e 42 72 62 c8 c0 68 d5 23 19 18 a4 b9 93 dd 80 5c ca 99 8b 88 a3 4 66 41 63 5e e2 ff 3e 5a 4c 9c 4a e5 23 49 20 3c 58 79 64
// bddd813c634239723171ef3fee98579b94964e3bb1cb3e427262c8c068d52319
// bddd813c634239723171ef3fee98579b94964e3bb1cb3e427262c8c068d52319
// [189, 221, 129, 60 , 99 , 66 , 57 , 114 , 49 , 113 , 239, 63 , 238, 152, 87 , 155, 148, 150, 78 , 59 , 177, 203, 62 , 66 , 114 , 98 , 200, 192, 104 , 213, 35 , 25 , ]

// 189 221 129 60 99 66 57 114 49 113 239 63 238 152 87 155 148 150 78 59 177 203 62 66 114 98 200 192 104 213 35 25
// bd dd 81 3c 63 42 39 72 31 71 ef 3f ee 98 57 9b 94 96 4e 3b b1 cb 3e 42 72 62 c8 c0 68 d5 23 19
// bddd813c634239723171ef3fee98579b94964e3bb1cb3e427262c8c068d52319


// 65 88 222 28 104 202 47 142 49 2 118 102 137 188 247 52 116 183 152 130 149 201 91 254 181 247 253 94 143 106 8 39
// 41 58 de 1c 68 ca 2f 8e 31 02 76 66 89 bc f7 34 74 b7 98 82 95 c9 5b fe b5 f7 fd 5e 8f 6a 08 27
// 4158de1c68ca2f8e3102766689bcf73474b7988295c95bfeb5f7fd5e8f6a0827
// 4158de1c68ca2f8e3102766689bcf73474b7988295c95bfeb5f7fd5e8f6a0827